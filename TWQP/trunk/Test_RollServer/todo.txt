一些事实：

. 一份 服务 即 一张 桌子
. 其多份实例会被客户端看到一个列表，客户端可以选择进入
. 至少要等到两个客户端进入才能开始游戏。
. 等待当前进入的客户端都 ready 之后，游戏开始。
. ready 之后到下一轮游戏开始这段时间，有客户端再进入则处于 观战等待 状态


流程：

. 服务等待一定数量客户端进入
	. 客户端通过代理，向游戏服务发：“请求进入”
	. 服务判断情况（比如检查当前人数上限，客户端是否有资格进入等）
		回应：“请进”，并记录 “编号，代理，超时” 等信息以占位
		回应：“不能进” 的情况在服务器端不作后续处理
	. 客户端收到 “请进” 后，界面转入具体游戏，之后向游戏服务发起 “已进入” 
		收到 “不能进” 就提示进入失败或相关信息
	. 服务收到 “已进入” 后，判断该客户端是否存在于发起进入请求的客户端列表中
		如果存在，则向客户端发 “请准备”，并记录超时时间
		如果不存在，则发 “进入超时”
	. 客户端收到 “请准备” 的后，界面须表现出让用户 “准备” 的样子
		并且，根据超时时间，有个被踢出服务的 “准备” 倒计时
. 服务等待所有客户端 “已准备”
	. 客户端通过用户操作向服务发起 “已准备”
	. 服务收到 “已准备”：检查玩家列表，如果发现玩家不存在，回应：准备超时，已被踢
		客户端界面应该是做出诸如关闭游戏界面，返回大厅并提示：长时间未 Ready 被踢之类的内容
. 服务等到所有客户端都 “已准备”, 游戏开始
	
. 服务向客户端发 “请投掷” ，并记录超时时间
	. 客户端收到 “请投掷” 后，界面表现大概是显示 请投骰子之类
	. 客户端向服务发送 “已投掷” ，并等待服务器公布结果
. 服务在超时时限内收到 “已投掷”，为该客户端产生随机点数
	. 如果超时未收到，则直接为超时客户端产生随机点数
	. 如果超时产生结果后才收到 “已投掷”，忽略
. 服务判断所有客户端均投掷过骰子后，
	. 系统统计结果（胜，负，平）附在 “请看结果” 后面并发送，
		置玩家状态为 已进入，记录 “请准备” 的超时
	. 客户端收到 “请看结果” 后，显示相关信息，并进入等待客户端 “准备” 形态



服务端超时处理：

阶段：客户端发起 “请求进入” 后，服务回应 “请进” 后，客户端发起 “已进入” 超时
办法：踢掉该客户端
	
阶段：服务端发起 “请准备” 后，客户端回应 “已准备” 超时
办法：踢掉该客户端




异常处理：

. 客户端 ready 之前断开
. 客户端 ready 之后断开
. 客户端于游戏开始之后断开
. 客户端掷骰子后断开
. 客户端收到成绩通告后断开

. 和客户端相连的代理异常断开（可能发生于上面任何时机）


阶段：

. 等待客户端进入和Ready阶段（个体限时）
. 等待客户端下阶段（集体限时）


